#+TITLE: C++ course
#+AUTHOR: Arian van Putten
* Today
- We're gonna work on the practicals. Lets see how far we get
- Explore basic syntax, get familiar to how it's similar to C#
- I will give a short intro to C++ syntax to get you started
- I will tell about Resource management in C++
- Resource management is what makes C++ unique compared to C# (No Garbage collector!)
- Was not part of the course last year ... But is important to understand.
* In the beginning there was C...
- And Bjarne Stroustrup didn't like it
- So he bolted features on top of it...
- Made it incompatible with C
- And called it C++
- LOOOONG Time ago (1989 ish)
- Underwent significant changes recently (2011)
- Now it's much easier to use
* Simple example
#+BEGIN_SRC cpp
#include <algorithm>
#include <iostream>
#include <string>

int main() {
    std::string line;                       // (1)
    std::getline(std::cin, line);           // (2)
    std::reverse(line.begin(), line.end()); // (3)
    std::cout << line << '\n';              // (4)
    return 0;
}
#+END_SRC
1. Declare string variable to store line into.
2. Read line from keyboard and store in variable.
3. Reverse line in-place.
4. Print reversed line.
* C-style language
- We have all the things you would expect. Looks like C#.
- Loops
- If statements
- Switch statement
- Arrays
- Functions
- Classes
* Loops
- ~for (x; y; z)~
- ~do ... while (...)~
- ~while (..) ...~ 
- Foreach exists as well :  ~for (int x : ints) { ... }~
* Conditionals
- Basically the same as in C#.
- ~if (blah) { ... } else { ... }~
- ~switch(x) { ... }~

* Types and variables
- Variables are declared and initialized using type and name, 
  and an optional list of constructor arguments.
- Variables can be assigned to with ~=~ just like in C#.
#+BEGIN_SRC cpp
int age = 20;            // whole number
double x = 5.0, y = 2.0; // two coordinates

x = y;
#+END_SRC
* Types and variables
- More complex types exist, such as strings and arrays.
#+BEGIN_SRC cpp
std::string name;                     // empty string
std::vector<double> numbers(5);       // array of five zeroes
std::map<std::string, double> health; // dictionary
// Note: you don't need "new" to create arrays and maps.
// You just declare them and they are there, ready to use.

name = "Jacco";
numbers[0] = 1.0;
health[name] = 133.3;
#+END_SRC
- Note: ~std::string~ is a safer, more modern alternative to ~char*~.
* Arrays
- Bit different than C#. We have three ways to define arrays
#+BEGIN_SRC cpp
std::array<int, 8> eight_ints;  // fixed size array on stack
// in C# that would be  int[] x = new int[8];  though note it's on heap
int eight_ints[8]; // way to create fixed size arrays on stack
std::vector<int> eight_ints(8); // resizable array
#+END_SRC cpp
* Lets program Hangman
- Looks a lot like how you would do it in C#!
#+BEGIN_SRC cpp
std::string word("Borrel");
std::set<char> guesses;
while (true) {
    for (char c : word) 
        std::cout << (guesses.count(c) ? c : '_');
    std::cout << '\n';

    bool done = true;
    for (char c : word) done = done && guesses.count(c);
    if (done) break;

    char guess = ' ';
    std::cin >> guess;
    guesses.insert(guess);
}
#+END_SRC
* Function definitions and calls
- Function definitions are much like in C#.
- Function call syntax is also the same.
#+BEGIN_SRC cpp
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}
#+END_SRC
* Creating own data types
- ~struct~ and ~class~ are used to define new data types.
- They mean the same thing, except ~struct~ fields are by default public.
- They can have methods, just like in C#.
- Note: in C# ~struct~ is a value type and ~class~ a reference type. In C++ both
  are *value types*. This means values are copied whenever you pass them around.
  We will get to C++ references later.
#+BEGIN_SRC cpp
struct vector {
    double x, y, z;
    void normalize() {
        double factor = std::sqrt(x*x + y*y + z*z);
        x /= factor; y /= factor; z /= factor;
    }
}; // This semicolon is mandatory. Don't ask why.
vector v{1.0, 2.0, 3.0}, u{2.0, -6.0, 4.0};
v.normalize();
#+END_SRC
* Constructors
- Fields are initialized with ~: foo(bar), baz(qux)~.
- Constructor body is run after fields are initialized. This can be used 
  to validate or modify input. 
#+BEGIN_SRC cpp
class normalized_vector {
public:
    normalized_vector(double x, double y, double z)
        : inner{x, y, z} { 
        inner.normalize();
    }

    vector get() const {
        return inner;
    }

private:
    vector inner;
};
#+END_SRC 
* Constructors
#+BEGIN_SRC cpp
normalized_vector light_direction(3.0, 2.0, 1.3);
vector inner = light_direction.get();
#+END_SRC 
- Bit different than C#
- No ~new~ keyword used.  ~new~ keyword does exist, but is not commonly used in Modern C++
* Headers
-  In C++, functions, and constructors and only be used after declaration
#+BEGIN_SRC cpp
int get_money(std::string name) {
  int interest = get_interest_rate();
  return 4;
}
int get_interest_rate() {
}
#+END_SRC
- The above won't compile, as ~money~ is used before declaration
- Because ~get_interest_rate~ is used before declaration
- Maybe ~get_interest_rate~ is even defined in another file

* Headers
- Instead, we can declare the existence of some function, separately from giving it's full definition
- Usually at the beginning of the file...
#+BEGIN_SRC cpp

int get_interest_rate(); // defined later in this file
int get_taxation(); // defined in taxation.cpp

int get_money(std::string name) {
  int interest = get_interest_rate();
  int taxation = get_taxatation();
  return 4;
}
int get_interest_rate() {
}
#+END_SRC

* Headers
-  Instead of starting each ~.cpp~ file with a list of all functions it can use
-  We put the list of functions in a ~.h~ or ~.hpp~ file and use the ~#include~ directive
-  ~#include~ simply copies the content of the ~.hpp~ file and literally pastes it into your ~.cpp~ file
- Now we only have to declare what functions exist once, and then not worry about definition order... 

* Headers and classes
- Usually we put a class definition in a header (what fields and methods exist)
- And then put hte implementation of the methods in a ~cpp~ file
#+BEGIN_SRC cpp
// person.h
class person {
   std::string name;
public:
   std::string get_name(); // Note, no body
};
#+END_SRC
#+BEGIN_SRC cpp
// person.cpp
std::string person::get_name() {
  return name + "!";
}
#+END_SRC

* Resources in C#
- In C#, memory is managed through a nondeterministic garbage collector.
- In C#, other resources such as file handles must be cleaned up explicitly.
#+BEGIN_SRC csharp
var file = new FileHandle();
// ... use file ...
file.Dispose();
#+END_SRC
#+BEGIN_SRC csharp
using (var file = new FileHandle()) {
    // ... use file ...
}
#+END_SRC
- In C++, resources are cleaned up both *implicitly* and *deterministically*!
* Resources and destructors
- A resource is anything that needs to be cleaned up after use.
- Resources are modeled using classes with destructors.
- No garbage collector necessary, yet resource cleanup is automatic.
#+BEGIN_SRC cpp
class file_handle {
public:
    file_handle(std::string path) 
        : inner(std::fopen(path.c_str())) { }
    file_handle(file_handle const&) = delete;
    file_handle& operator=(file_handle const&) = delete;
    ~file_handle() {
        std::fclose(inner);
    }
private:
    FILE* inner;
};
#+END_SRC
- Note: you can use ~std::ifstream~ to read files. You don't need to
  reimplement it yourself.
* Resources and destructors
- It is a common misconception that resource management is manual in C++.
- Destructors are called automatically at the end of the scope. You don't 
  need to close files, unlock mutexes, or release any sort of other resource
  manually. 
- No need for a construct such as ~using~ in C#.

#+BEGIN_SRC cpp
vector read_vector() {
    file_handle file("vectors.txt");
    vector result;
    // ... read file ...
    return result;
} // Destructor called automatically at end of scope.
#+END_SRC

* Resources and destructors
- Memory is also a resource! And can be managed with the same mechanisms.
- So not garbage collected by a garbage collector! But cleaned up by destructors.
- Examples of resources classes that manage memory are ~std::string~ and ~std::vector~.
- A vector is a growable piece of memory (you can delete and add elements).
- You don't need to explicitly free it after use. Its destructor is automatically called.
* Resources and destructors
- Destructors are automatically generated, and will invoke the destructors of all members.
- This means that if you have a struct with file handles or vectors, they will be cleaned up
  when the enclosing struct is cleaned up.
- You only need to write destructors yourself if you use types that don't already have them!
#+BEGIN_SRC cpp
class display {
    std::string title;
    vector<byte> screen_buffer;
    std::unique_ptr<HWND, hwnd_delete> window;
};
{
    display d;
    draw_circle(d, 2.2, 4.3, 0.8);
    wait_key_press();
} // d.title, d.screen_buffer, and d.window automatically 
  // cleaned up when d goes out of scope.
#+END_SRC
* Resource management
- Resource management a big deal in C++.
- It's one of its strongest features. Automatic resource management without garbage collection.
- Many (C) programmers don't realise it's a feature, and manage memory 'manually'.
* Resource management
#+BEGIN_SRC c
int main() {
    char *buffer = malloc(4);
    if (buffer == NULL) return -1;
    buffer[0] = 'a'; buffer[1] = 'r'; buffer[2] = 'i'; buffer[3] = '\0';
    char *old_buffer = buffer;
    buffer = realloc(old_buffer, 6);
    if (buffer == NULL) {free(old_buffer); return -1;}
    buffer[3] = 'a';
    buffer[4] = 'n';
    buffer[5] = '\0';
    puts(buffer);
    free(buffer);
}
#+END_SRC
- Memory management in C. (It's a fucking nightmare)

* Resource management
#+BEGIN_SRC cpp
int main() {
    std::string buffer("ari");
    buffer.push_back('a');
    buffer.push_back('n');
    std::cout << buffer << '\n';
}
#+END_SRC
- Note: No explicit free().
- No explicit reallocation.
- don't have to deal with setting last byte to ~\0~
- Exceptions are used for error handling, not returning ~NULL~
- Exceptions cause Destructor to be run.

* Learning sources
- There are a lot of bad resources about C++ on the internet. Here are
  some good ones.
  - C++ language and library reference: https://en.cppreference.com/w/
  - C++ books: https://tinyurl.com/so-cxxbooks
  - c++-faq tag on Stack Overflow: https://stackoverflow.com/questions/tagged/c%2b%2b-faq
